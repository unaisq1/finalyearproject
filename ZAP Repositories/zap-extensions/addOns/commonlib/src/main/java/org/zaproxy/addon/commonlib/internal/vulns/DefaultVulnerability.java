/*
 * Zed Attack Proxy (ZAP) and its related class files.
 *
 * ZAP is an HTTP/HTTPS proxy for assessing web application security.
 *
 * Copyright 2023 The ZAP Development Team
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package org.zaproxy.addon.commonlib.internal.vulns;

import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.dataformat.xml.annotation.JacksonXmlElementWrapper;
import java.util.List;
import org.zaproxy.addon.commonlib.vulnerabilities.Vulnerability;

public class DefaultVulnerability implements Vulnerability {

    private Integer wascId;

    private String id;

    @JsonProperty("alert")
    private String name;

    @JsonProperty("desc")
    private String description;

    private String solution;

    @JsonProperty("reference")
    @JacksonXmlElementWrapper(useWrapping = false)
    private List<String> references;

    private String referencesAsString;

    @Override
    public int getWascId() {
        if (wascId == null) {
            wascId = -1;
            String str = id.substring(5);
            try {
                wascId = Integer.parseInt(str);
            } catch (NumberFormatException e) {
                // Some have trailing alphabetic characters
                try {
                    wascId = Integer.parseInt(str.substring(0, str.length() - 1));
                } catch (NumberFormatException e2) {
                    // Ignore
                }
            }
        }
        return wascId;
    }

    void setId(String id) {
        this.id = id;
    }

    @Override
    public String getName() {
        return name;
    }

    @Override
    public String getDescription() {
        return description;
    }

    @Override
    public String getSolution() {
        return solution;
    }

    @Override
    public List<String> getReferences() {
        return references;
    }

    void setReferences(List<String> references) {
        this.references = references;
    }

    @Override
    public String getReferencesAsString() {
        if (referencesAsString == null) {
            StringBuilder sb = new StringBuilder();
            for (String ref : references) {
                if (sb.length() > 0) {
                    sb.append('\n');
                }
                sb.append(ref);
            }
            referencesAsString = sb.toString();
        }
        return referencesAsString;
    }
}
