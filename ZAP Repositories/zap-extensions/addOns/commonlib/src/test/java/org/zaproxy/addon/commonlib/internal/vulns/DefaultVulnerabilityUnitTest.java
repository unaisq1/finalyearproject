/*
 * Zed Attack Proxy (ZAP) and its related class files.
 *
 * ZAP is an HTTP/HTTPS proxy for assessing web application security.
 *
 * Copyright 2023 The ZAP Development Team
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package org.zaproxy.addon.commonlib.internal.vulns;

import static org.hamcrest.MatcherAssert.assertThat;
import static org.hamcrest.Matchers.equalTo;
import static org.hamcrest.Matchers.is;
import static org.hamcrest.Matchers.sameInstance;

import java.util.List;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.params.ParameterizedTest;
import org.junit.jupiter.params.provider.CsvSource;

/** Unit test for {@link DefaultVulnerability}. */
class DefaultVulnerabilityUnitTest {

    private DefaultVulnerability vulnerability;

    @BeforeEach
    void setUp() {
        vulnerability = new DefaultVulnerability();
    }

    @ParameterizedTest
    @CsvSource({"wasc_1, 1", "wasc_2a, 2", "not_wasc_id, -1"})
    void shouldGetWascId(String id, int expectedWascId) {
        // Given
        vulnerability.setId(id);
        // When
        int wascId = vulnerability.getWascId();
        // Then
        assertThat(wascId, is(equalTo(expectedWascId)));
    }

    @ParameterizedTest
    @CsvSource({"wasc_1, 1", "wasc_2a, 2", "not_wasc_id, -1"})
    void shouldGetSameWascId(String id, int expectedWascId) {
        // Given
        vulnerability.setId(id);
        // When
        int wascId1st = vulnerability.getWascId();
        int wascId2nd = vulnerability.getWascId();
        // Then
        assertThat(wascId1st, is(equalTo(wascId2nd)));
    }

    @Test
    void shouldGetReferencesAsString() {
        // Given
        vulnerability.setReferences(List.of("Ref A", "Ref B"));
        // When
        String references = vulnerability.getReferencesAsString();
        // Then
        assertThat(references, is(equalTo("Ref A\nRef B")));
    }

    @Test
    void shouldGetSameInstanceReferencesAsString() {
        // Given
        vulnerability.setReferences(List.of("Ref A", "Ref B"));
        // When
        String references1st = vulnerability.getReferencesAsString();
        String references2nd = vulnerability.getReferencesAsString();
        // Then
        assertThat(references1st, is(sameInstance(references2nd)));
    }
}
