package org.zaproxy.zap.extension.tips;

import java.io.File;
import java.io.FileReader;
import java.io.FileWriter;
import java.util.ArrayList;
import java.util.Collections;
import java.util.Enumeration;
import java.util.Iterator;
import java.util.List;
import java.util.Properties;
import java.util.Random;
import java.util.ResourceBundle;
import java.util.Set;
import org.parosproxy.paros.Constant;
import org.parosproxy.paros.extension.ExtensionAdaptor;
import org.parosproxy.paros.extension.ExtensionHook;
import org.parosproxy.paros.view.View;
import org.zaproxy.zap.view.ZapMenuItem;

public class ExtensionTipsAndTricks extends ExtensionAdaptor {
   public static final String NAME = "ExtensionTipsAndTricks";
   private static final String PREFIX = "tips";
   private static final String TIPS_PREFIX = "tips.tip.";
   private ZapMenuItem menuTipsAndTricks = null;
   private TipsAndTricksDialog dialog = null;
   private List<String> tipsAndTricks = null;
   private Random random = new Random();

   public ExtensionTipsAndTricks() {
      super("ExtensionTipsAndTricks");
   }

   @Override
   public void hook(ExtensionHook extensionHook) {
      super.hook(extensionHook);
      if (this.hasView()) {
         extensionHook.getHookMenu().addHelpMenuItem(this.getMenuTipsAndTricks());
      }

   }

   @Override
   public boolean canUnload() {
      return true;
   }

   private ZapMenuItem getMenuTipsAndTricks() {
      if (this.menuTipsAndTricks == null) {
         this.menuTipsAndTricks = new ZapMenuItem("tips.topmenu.help.tips");
         this.menuTipsAndTricks.addActionListener((e) -> {
            this.displayRandomTip();
         });
      }

      return this.menuTipsAndTricks;
   }

   private List<String> getTipsAndTricks() {
      if (this.tipsAndTricks == null) {
         this.tipsAndTricks = new ArrayList<>();
         ResourceBundle rb = Constant.messages.getMessageBundle("tips");
         Enumeration<String> enm = rb.getKeys();

         while(enm.hasMoreElements()) {
            String key = enm.nextElement();
            if (key.startsWith("tips.tip.")) {
               this.tipsAndTricks.add(rb.getString(key));
            }
         }

         if (this.tipsAndTricks.isEmpty()) {
            this.getMenuTipsAndTricks().setEnabled(false);
         }
      }

      return this.tipsAndTricks;
   }

   public String getRandomTip() {
      return this.getTipsAndTricks().get(this.random.nextInt(this.getTipsAndTricks().size()));
   }

   private void displayRandomTip() {
      this.getTipsAndTricksDialog().displayTip();
   }

   private TipsAndTricksDialog getTipsAndTricksDialog() {
      if (this.dialog == null) {
         this.dialog = new TipsAndTricksDialog(this, View.getSingleton().getMainFrame());
      }

      return this.dialog;
   }

   @Override
   public String getDescription() {
      return Constant.messages.getString("tips.desc");
   }

   public static void main(String[] params) {
      Properties props = new Properties();
      File f = new File("resources/org/zaproxy/zap/extension/tips/resources/Messages.properties");

      try {
         props.load(new FileReader(f));
         File helpFile = new File("javahelp/org/zaproxy/zap/extension/tips/resources/help/contents/tips.html");
         FileWriter fw = new FileWriter(helpFile);
         fw.write("<!DOCTYPE html PUBLIC \"-//W3C//DTD HTML 3.2 Final//EN\">\n");
         fw.write("<HTML>\n");
         fw.write("<HEAD>\n");
         fw.write("<META HTTP-EQUIV=\"Content-Type\" CONTENT=\"text/html; charset=utf-8\">\n");
         fw.write("<TITLE>\n");
         fw.write("Tips and Tricks\n");
         fw.write("</TITLE>\n");
         fw.write("</HEAD>\n");
         fw.write("<BODY BGCOLOR=\"#ffffff\">\n");
         fw.write("<H1>Tips and Tricks</H1>\n");
         fw.write("<!-- Note that this file is generated by ExtensionTipsAndTricks-->\n");
         fw.write("This add-on adds a 'help' menu item which displays useful ZAP tips and tricks.<br>\n");
         fw.write("Tips are also shown in the splash screen on start up.\n");
         fw.write("<H2>Full list of tips</H2>\n");
         Set<Object> keys = props.keySet();
         List<String> list = new ArrayList<>();
        //  Iterator var7 = keys.iterator();

        //  while(var7.hasNext()) {
        //     Object key = var7.next();
        //     if (key.toString().startsWith("tips.tip.")) {
        //        list.add(props.getProperty(key.toString()));
        //     }
        //  }

        for (Object key : keys) {
            if (key.toString().startsWith(TIPS_PREFIX)) {
                list.add(props.getProperty(key.toString()));
            }
        }

         Collections.sort(list);
        //  var7 = list.iterator();
         
        for (String tip : list) {
            fw.write("\n<p>" + tip.replace("\n", "<br>\n") + " </p>\n\n");
        }

        //  while(var7.hasNext()) {
        //     String tip = (String)var7.next();
        //     fw.write("\n<p>" + tip.replace("\n", "<br>\n") + " </p>\n\n");
        //  }

         fw.write("</BODY>\n");
         fw.write("</HTML>\n");
         fw.close();
         System.out.println("Help file generated: " + helpFile.getAbsolutePath());
      } catch (Exception var9) {
         var9.printStackTrace();
      }

   }
}
